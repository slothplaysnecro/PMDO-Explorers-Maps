--[[
    init.lua
    Created: 10/31/2023 15:01:40
    Description: Autogenerated script file for the map dusk_beach.
]]--
-- Commonly included lua functions and data
require 'common'
require 'CharacterActions'
require 'ExplorerEssentials'

-- Package name
local dusk_beach = {}

-- Local, localized strings table
-- Use this to display the named strings you added in the strings files for the map!
-- Ex:
--      local localizedstring = MapStrings['SomeStringName']
local MapStrings = {}

-------------------------------
-- Map Callbacks
-------------------------------
---dusk_beach.Init(map)
--Engine callback function
function dusk_beach.Init(map)

  --This will fill the localized strings table automatically based on the locale the game is 
  -- currently in. You can use the MapStrings table after this line!
  MapStrings = COMMON.AutoLoadLocalizedStrings()
  
  COMMON:RespawnAllies()

end

---dusk_beach.Enter(map)
--Engine callback function
function dusk_beach.Enter(map)

  GAME:CutsceneMode(true)
  
  if SV.Progression.Chapter == 1 then
  
	if SV.Progression.SectionFlag == 1 then
	
		dusk_beach.CH1_ExplorerTeamInvite()
		
	elseif SV.beach_cave.FailedDungeon then
	
		dusk_beach.CH1_FailedBeachCave()
		
	else
	
		dusk_beach.CH1_PartnerFindsHero()
		
	end
  end
  
end

---dusk_beach.Exit(map)
--Engine callback function
function dusk_beach.Exit(map)


end

---dusk_beach.Update(map)
--Engine callback function
function dusk_beach.Update(map)


end

---dusk_beach.GameSave(map)
--Engine callback function
function dusk_beach.GameSave(map)


end

---dusk_beach.GameLoad(map)
--Engine callback function
function dusk_beach.GameLoad(map)

  GAME:FadeIn(20)

end

-------------------------------
-- Entities Callbacks
-------------------------------



-------------------------------
-- Cutscene Functions
-------------------------------

function dusk_beach.CH1_PartnerFindsHero()
	
	local player = CH('PLAYER')
	local partner = CH('PARTNER')
	
	partner.CollisionDisabled = true
	
	local hTalkKind = SV.Personality.HeroTalkKind
	local pTalkKind = SV.Personality.PartnerTalkKind
	
	local marker = MRKR("Entrance")
	local cam = MRKR("C1S1_CamPos_1")
	
	GROUND:TeleportTo(partner, marker.Position.X - 120, marker.Position.Y, Direction.Left)
	GAME:MoveCamera(cam.Position.X, cam.Position.Y, 1, false)
	
	--fade in to initial shot
	local coro1 = TASK:BranchCoroutine(function() SOUND:FadeInSE("Ambient/AMB_Ocean", 60) end)
	local coro2 = TASK:BranchCoroutine(function() GAME:FadeIn(60) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	GAME:WaitFrames(120)
	
	GAME:FadeOut(false, 60)
	
	--krabby 1
	UI:WaitShowBG("Krabby", 10, 60)
	ExplorerEssentials.SpawnBubbles(1)
	GAME:WaitFrames(120)
	UI:WaitHideBG(60)
	
	--krabby 2 & play bgm
	SOUND:PlayBGM("004 - On the Beach at Dusk.ogg", true)
	UI:WaitShowBG("Krabby2", 10, 60)
	ExplorerEssentials.SpawnBubbles(2)
	GAME:WaitFrames(120)
	UI:WaitHideBG(60)
	
	--partner walks up
	ExplorerEssentials.SpawnBubbles(3)
	GAME:FadeIn(60)
	
	GAME:WaitFrames(60)
	
	GROUND:MoveToPosition(partner, cam.Position.X, marker.Position.Y, false, 1)
	
	GAME:WaitFrames(10)
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Inspired")
	
	local coro1 = TASK:BranchCoroutine(function() UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_1_'..tostring(pTalkKind)])) end)
	local coro2 = TASK:BranchCoroutine(function() GROUND:MoveToPosition(partner, cam.Position.X, cam.Position.Y, false, 1) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	GAME:WaitFrames(60)
	
	GAME:FadeOut(false, 60)
	
	--sunset view
	UI:WaitShowBG("OceanSunset", 1, 60)
	ExplorerEssentials.SpawnBubbles(4)
	
	GAME:WaitFrames(240)
	UI:WaitHideBG(60)
	
	--back to partner
	ExplorerEssentials.SpawnBubbles(3)
	GAME:FadeIn(60)
	GAME:WaitFrames(60)
	
	UI:SetSpeakerEmotion("Normal")
	
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_2'], _DATA:GetMonster("krabby"):GetColoredName()))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_3_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_4_'..tostring(pTalkKind)]))
	
	GAME:FadeOut(false, 60)
	
	--back to view
	UI:WaitShowBG("OceanSunset", 1, 60)
	ExplorerEssentials.SpawnBubbles(4)
	
	GAME:WaitFrames(240)
	UI:WaitHideBG(60)
	
	--partner exposition
	ExplorerEssentials.SpawnBubbles(3)
	GAME:FadeIn(60)
	GAME:WaitFrames(60)
	
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_5']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_6_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_7']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_8_'..tostring(pTalkKind)]))
	
	--bgm fade out
	local coro1 = TASK:BranchCoroutine(function() SOUND:FadeOutBGM(120) end)
	local coro2 = TASK:BranchCoroutine(function() GAME:WaitFrames(60) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	GROUND:CharAnimateTurnTo(partner, Direction.Left, 4)
	
	GAME:WaitFrames(30)
	
	SOUND:PlayBattleSE("EVT_Emote_Exclaim")
	GROUND:CharSetEmote(partner, "notice", 1)
	
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_9']))
	
	--partner notices something
	local marker = MRKR("C1S1_PlayerSpawn")
	GROUND:TeleportTo(player, marker.Position.X, marker.Position.Y, Direction.Right)
	GROUND:CharSetAnim(player, "Laying", true)
	
	local coro1 = TASK:BranchCoroutine(function() GAME:MoveCamera(cam.Position.X - 60, cam.Position.Y, 60, false) end)
	local coro2 = TASK:BranchCoroutine(function() GROUND:MoveInDirection(partner, Direction.Left, 60, false, 1) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	SOUND:PlayBattleSE("EVT_Emote_Startled")
	GROUND:CharSetEmote(partner, "shock", 1)
	CharacterActions.ScaredJump(partner, Direction.Left)
	
	UI:SetSpeakerEmotion("Surprised")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_10']))
	
	local coro1 = TASK:BranchCoroutine(function() GAME:MoveCamera(player.Position.X + 20, cam.Position.Y, 60, false) end)
	local coro2 = TASK:BranchCoroutine(function() GROUND:MoveInDirection(partner, Direction.Left, 60, false, 2) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	CharacterActions.HopTwice(partner, Direction.Left)
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_11']))
	
	--partner wakes up hero
	GROUND:CharSetDrawEffect(player, DrawEffect.Shaking)
	GAME:WaitFrames(10)
	GROUND:CharEndDrawEffect(player, DrawEffect.Shaking)
	
	UI:SetSpeaker('', false, player.CurrentForm.Species, player.CurrentForm.Form, player.CurrentForm.Skin, player.CurrentForm.Gender)
	UI:SetSpeakerEmotion("Pain")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Hero_1']))
	
	local coro1 = TASK:BranchCoroutine(function() UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Hero_2'])) end)
	local coro2 = TASK:BranchCoroutine(function() GAME:WaitFrames(10)
												GROUND:CharSetDrawEffect(player, DrawEffect.Shaking)
												GAME:WaitFrames(20)
												GROUND:CharEndDrawEffect(player, DrawEffect.Shaking) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	GROUND:CharWaitAnim(player, "Wake")
	GAME:WaitFrames(30)
	GROUND:CharAnimateTurnTo(player, Direction.Down, 4)
	
	SOUND:PlayBattleSE("EVT_Emote_Exclaim")
	GROUND:CharSetEmote(partner, "exclaim", 1)
	GAME:WaitFrames(30)
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_12_'..tostring(pTalkKind)]))
	
	GAME:WaitFrames(10)
	
	local coro1 = TASK:BranchCoroutine(function() GROUND:CharAnimateTurnTo(player, Direction.Left, 4) end)
	local coro2 = TASK:BranchCoroutine(function() GROUND:AnimateInDirection(partner, "Walk", Direction.Left, Direction.Right, 32, 1, 1) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	GAME:WaitFrames(15)
	GROUND:CharAnimateTurnTo(player, Direction.Right, 4)
	GAME:WaitFrames(30)
	GROUND:CharAnimateTurnTo(player, Direction.Down, 4)
	GAME:WaitFrames(45)
	
	UI:SetSpeaker('', false, player.CurrentForm.Species, player.CurrentForm.Form, player.CurrentForm.Skin, player.CurrentForm.Gender)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Hero_3']))
	
	GAME:WaitFrames(10)
	GROUND:CharTurnToCharAnimated(player, partner, 4, true)
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_13_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_14_'..tostring(pTalkKind)]))
	
	GAME:WaitFrames(10)
	UI:SetSpeaker('', false, player.CurrentForm.Species, player.CurrentForm.Form, player.CurrentForm.Skin, player.CurrentForm.Gender)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Hero_4']))
	
	GAME:WaitFrames(10)
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Happy")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_15_'..tostring(pTalkKind)], partner:GetDisplayName()))
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_16_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_17_'..tostring(pTalkKind)]))
	
	GAME:WaitFrames(15)
	GROUND:CharSetAnim(player, "Walk", true)
	GAME:WaitFrames(45)
	GROUND:CharEndAnim(player)
	GAME:WaitFrames(30)
	
	SOUND:PlayBattleSE("EVT_Emote_Startled")
	CharacterActions.ScaredJump(partner, Direction.Left)
	
	GAME:WaitFrames(10)
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Surprised")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_18_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_19'], _DATA:GetMonster(player.CurrentForm.Species):GetColoredName()))
	
	GAME:WaitFrames(10)
	GROUND:CharAnimateTurnTo(player, Direction.Up, 4)
	GAME:WaitFrames(30)
	GROUND:CharAnimateTurnTo(player, Direction.Down, 4)
	GAME:WaitFrames(45)
	GROUND:CharAnimateTurnTo(player, Direction.Up, 4)
	GAME:WaitFrames(30)
	GROUND:CharAnimateTurnTo(player, Direction.Right, 4)
	GAME:WaitFrames(45)
	
	SOUND:PlayBattleSE("EVT_Emote_Shock")
	GROUND:CharSetEmote(player, "shock", 1)
	GAME:WaitFrames(30)
	
	UI:SetSpeaker('', false, player.CurrentForm.Species, player.CurrentForm.Form, player.CurrentForm.Skin, player.CurrentForm.Gender)
	UI:SetSpeakerEmotion("Surprised")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Hero_5']))
	
	local first_letter = string.upper(string.sub(player.CurrentForm.Species, 1, 1)) --thanks palika :pray:
	
	if first_letter == "A" or first_letter == "E" or first_letter == "I" or first_letter == "O" or first_letter == "U" then
	--this shouldn't be possible in english for any default eos starters but a few custom ones need this
		UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Hero_6_Alt'], _DATA:GetMonster(player.CurrentForm.Species):GetColoredName()))
	else
		UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Hero_6'], _DATA:GetMonster(player.CurrentForm.Species):GetColoredName()))
	end
	
	GAME:WaitFrames(15)
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Hero_7']))
	
	GAME:WaitFrames(10)
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_20']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_21']))
	
	SOUND:PlayBattleSE("EVT_Emote_Exclaim_Surprised")
	GROUND:CharSetEmote(player, "shock", 1)
	GAME:WaitFrames(30)
	CharacterActions.ShakeHead(player, Direction.Right)
	GAME:WaitFrames(30)
	
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_22']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_23_'..tostring(pTalkKind)]))
	
	UI:SetSpeaker('', false, player.CurrentForm.Species, player.CurrentForm.Form, player.CurrentForm.Skin, player.CurrentForm.Gender)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Hero_8']))
	
	GAME:WaitFrames(10)
	
	--name entry
	UI:ResetSpeaker()
	local ch = false
	local name = ""
	while not ch do
		name = ""
		while name == "" do
		UI:NameMenu(STRINGS:Format(MapStrings['Name_Prompt']), "")
		UI:WaitForChoice()
		name = UI:ChoiceResult()
		end
	
		GAME:SetCharacterNickname(GAME:GetPlayerPartyMember(0), name)
		UI:ChoiceMenuYesNo(STRINGS:Format(MapStrings['Name_Confirm'], player:GetDisplayName()), true)
		UI:WaitForChoice()
		ch = UI:ChoiceResult()
	end
	
	GAME:WaitFrames(10)
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_24_'..tostring(pTalkKind)], player:GetDisplayName()))
	
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_25']))
	
	GAME:WaitFrames(15)
	SOUND:PlayBattleSE("EVT_Emote_Sweating")
	GROUND:CharSetEmote(partner, "sweating", 1)
	
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_26']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_27']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_28_'..tostring(pTalkKind)]))
	
	--setup koffing, zubat, and relic fragment
	local koffing = CH('Koffing')
	local zubat = CH('Zubat')
	local relic = OBJ('RelicFragment')
	
	GROUND:TeleportTo(koffing, cam.Position.X, cam.Position.Y + 32, Direction.Left)
	GROUND:TeleportTo(zubat, cam.Position.X, cam.Position.Y, Direction.Left)
	
	local coro1 = TASK:BranchCoroutine(function() GAME:WaitFrames(5) --koffing
												GROUND:MoveInDirection(koffing, Direction.Left, 64, false, 2) end) 
	local coro2 = TASK:BranchCoroutine(function() GROUND:MoveInDirection(zubat, Direction.Left, 64, false, 2) --zubat
												GROUND:CharWaitAnim(zubat, "Attack")
												SOUND:PlayBattleSE("EVT_Tackle") end) 
	local coro3 = TASK:BranchCoroutine(function() GAME:WaitFrames(30) --player
												SOUND:PlayBattleSE("EVT_Emote_Exclaim")
												GROUND:CharSetEmote(player, "exclaim", 1) end)
	TASK:JoinCoroutines({coro1, coro2, coro3})
	
	local coro1 = TASK:BranchCoroutine(function() GROUND:AnimateInDirection(partner, "Hurt", Direction.Left, Direction.Left, 17, 1, 4) --partner
												GROUND:CharSetEmote(partner, "shock", 1)
												GROUND:CharSetAction(partner, RogueEssence.Ground.PoseGroundAction(partner.Position, partner.Direction, RogueEssence.Content.GraphicsManager.GetAnimIndex("Pain"))) end) 
	local coro2 = TASK:BranchCoroutine(function() GAME:WaitFrames(15) --player
												GROUND:AnimateInDirection(player, "Walk", Direction.Right, Direction.Left, 8, 1, 4) end) 
	local coro3 = TASK:BranchCoroutine(function() GROUND:TeleportTo(relic, partner.Position.X, partner.Position.Y, Direction.Down) --relic fragment
												GROUND:MoveObjectToPosition(relic, koffing.Position.X - 48, koffing.Position.Y - 8, 4) end)
	local coro4 = TASK:BranchCoroutine(function() UI:SetSpeakerEmotion("Shouting") --dialogue
												UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_29_'..tostring(pTalkKind)])) end)
	TASK:JoinCoroutines({coro1, coro2, coro3, coro4})
	
	GAME:WaitFrames(10)
	UI:SetSpeaker(koffing)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Koffing_1']))
	
	GAME:WaitFrames(10)
	GROUND:CharAnimateTurnTo(partner, Direction.Right, 1)
	SOUND:PlayBattleSE("EVT_Emote_Complain_2")
	GROUND:CharSetEmote(partner, "angry", -1)
	GROUND:CharSetAnim(partner, "None", false)
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Angry")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_30']))
	
	GAME:WaitFrames(10)
	UI:SetSpeaker(zubat)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Zubat_1']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Zubat_2']))
	
	GROUND:CharSetEmote(partner, "none", 1)
	CharacterActions.ScaredJump(partner, Direction.Right)
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Surprised")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_31']))
	
	GAME:WaitFrames(10)
	GROUND:CharAnimateTurnTo(zubat, Direction.DownLeft, 4)
	UI:SetSpeaker(zubat)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Zubat_3']))
	
	local coro1 = TASK:BranchCoroutine(function() GAME:WaitFrames(5) --player
												GROUND:CharAnimateTurnTo(player, Direction.DownRight, 4) end) 
	local coro2 = TASK:BranchCoroutine(function() GROUND:CharAnimateTurnTo(partner, Direction.DownRight, 4) --partner
												SOUND:PlayBattleSE("EVT_Emote_Exclaim")
												GROUND:CharSetEmote(partner, "exclaim", 1)
												GAME:WaitFrames(30) end) 
	TASK:JoinCoroutines({coro1, coro2})
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Surprised")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_32_'..tostring(pTalkKind)]))
	
	GAME:WaitFrames(10)
	UI:SetSpeaker(zubat)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Zubat_4']))
	
	local origX = zubat.Position.X
	local origY = zubat.Position.Y
	
	GAME:WaitFrames(15)
	GROUND:MoveToPosition(zubat, relic.Position.X, relic.Position.Y + 1, false, 1)
	GAME:WaitFrames(15)
	GROUND:Hide("RelicFragment")
	
	local coro1 = TASK:BranchCoroutine(function() GROUND:AnimateToPosition(zubat, "Walk", Direction.DownLeft, origX, origY, 1, 1, 0) --zubat
												GROUND:CharAnimateTurnTo(zubat, Direction.Left, 4)
												GROUND:CharAnimateTurnTo(player, Direction.Right, 4)
												GROUND:CharAnimateTurnTo(partner, Direction.Right, 4) end) 
	local coro2 = TASK:BranchCoroutine(function() SOUND:PlayBattleSE("EVT_Emote_Shock")
												GROUND:CharSetEmote(partner, "shock", 1)
												UI:SetSpeaker(partner)
												UI:SetSpeakerEmotion("Surprised")
												UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_33'])) end) 
	TASK:JoinCoroutines({coro1, coro2})
	
	GAME:WaitFrames(10)
	UI:SetSpeaker(koffing)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Koffing_2']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Koffing_3']))
	
	local coro1 = TASK:BranchCoroutine(function() GROUND:CharTurnToCharAnimated(zubat, koffing, 8, true) end) 
	local coro2 = TASK:BranchCoroutine(function() GROUND:CharTurnToCharAnimated(koffing, zubat, 8, true) end) 
	TASK:JoinCoroutines({coro1, coro2})
	
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Koffing_4']))
	
	local coro1 = TASK:BranchCoroutine(function() GROUND:CharAnimateTurnTo(zubat, Direction.Left, 4) end) 
	local coro2 = TASK:BranchCoroutine(function() GROUND:CharAnimateTurnTo(koffing, Direction.Left, 4) end) 
	TASK:JoinCoroutines({coro1, coro2})
	
	GAME:WaitFrames(10)
	UI:SetSpeaker(zubat)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Zubat_5']))
	
	local posx = 0
	local posy = 0	
	
	local coro1 = TASK:BranchCoroutine(function() posx = koffing.Position.X - 16 --koffing
												posy = koffing.Position.Y + 16
												GROUND:MoveToPosition(koffing, posx, posy, false, 1) 
												GROUND:MoveToPosition(koffing, koffing.Position.X - 240, koffing.Position.Y, false, 1)
												GROUND:Hide("Koffing") end) 
	local coro2 = TASK:BranchCoroutine(function() GAME:WaitFrames(30)
												posx = zubat.Position.X - 48 --zubat
												posy = zubat.Position.Y + 48
												GROUND:MoveToPosition(zubat, posx, posy, false, 1) 
												GROUND:MoveToPosition(zubat, zubat.Position.X - 240, zubat.Position.Y, false, 1)
												GROUND:Hide("Zubat")
												continue = true end)
	local coro3 = TASK:BranchCoroutine(function() GAME:WaitFrames(40) --player turn to people leaving
												GROUND:CharAnimateTurnTo(player, Direction.DownLeft, 60) end) 
	local coro4 = TASK:BranchCoroutine(function() GAME:WaitFrames(30) --partner turn to people leaving
												GROUND:CharAnimateTurnTo(partner, Direction.DownLeft, 60) end) 
	TASK:JoinCoroutines({coro1, coro2, coro3, coro4})
	
	GAME:WaitFrames(60)
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Sad")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_34']))
	
	GROUND:CharAnimateTurnTo(partner, Direction.Left, 4)
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_35']))
	
	GROUND:CharAnimateTurnTo(player, Direction.Right, 4)
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_36']))
	
	UI:SetSpeakerEmotion("Teary-Eyed")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_37']))
	
	CharacterActions.ShakeHead(partner, Direction.Left)
	GAME:WaitFrames(30)
	
	UI:SetSpeakerEmotion("Determined")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_38']))
	
	--begin dialogue choices
	local continue = false
	local choices = {STRINGS:Format(MapStrings['CH1_S1_Option_1']),
           STRINGS:Format(MapStrings['CH1_S1_Option_2']),
           STRINGS:Format(MapStrings['CH1_S1_Option_3'])}
	
	UI:BeginChoiceMenu(STRINGS:Format(MapStrings['CH1_S1_Partner_39_'..tostring(pTalkKind)]), choices, 1, 3)
	UI:WaitForChoice()
	result = UI:ChoiceResult()
	
	while not continue do
		--A
		if result == 1 then --yes
			continue = true
			
			CharacterActions.HopTwice(partner, Direction.Left)
			
			UI:SetSpeakerEmotion("Inspired")
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_40A']))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_41A_'..tostring(pTalkKind)]))
			
			--leave for dungeon
			local coro1 = TASK:BranchCoroutine(function() posx = partner.Position.X - 48 --partner
												posy = partner.Position.Y + 48
												GROUND:MoveToPosition(partner, posx, posy, false, 1) 
												GROUND:MoveToPosition(partner, partner.Position.X - 140, partner.Position.Y, false, 1)
												GROUND:Hide("PARTNER") end) 
			local coro2 = TASK:BranchCoroutine(function() GAME:WaitFrames(60)
												posx = player.Position.X - 48 --player
												posy = player.Position.Y + 48
												GROUND:MoveToPosition(player, posx, posy, false, 1) 
												GROUND:MoveToPosition(player, player.Position.X - 140, player.Position.Y, false, 1)
												GROUND:Hide("PLAYER") end)
			TASK:JoinCoroutines({coro1, coro2})
			
		--B
		elseif result == 2 then --no
		
			CharacterActions.ScaredJump(partner, Direction.Left)
			
			UI:SetSpeakerEmotion("Surprised")
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_40B_'..tostring(pTalkKind)]))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_41B_'..tostring(pTalkKind)]))
			UI:SetSpeakerEmotion("Teary-Eyed")
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_42B']))
			
			CharacterActions.HopTwice(partner, Direction.Left)
			
			--back to choices
			UI:BeginChoiceMenu(STRINGS:Format(MapStrings['CH1_S1_Partner_43B_'..tostring(pTalkKind)]), choices, 1, 3)
			UI:WaitForChoice()
			result = UI:ChoiceResult()
			
		else --other
		
			--new choice menu
			choices = {STRINGS:Format(MapStrings['CH1_S1_Option_4']),
			STRINGS:Format(MapStrings['CH1_S1_Option_5'])}
			
			UI:SetSpeakerEmotion("Worried")
			UI:BeginChoiceMenu(STRINGS:Format(MapStrings['CH1_S1_Partner_44B_'..tostring(pTalkKind)]), choices, 1, 2)
			UI:WaitForChoice()
			result = UI:ChoiceResult() --1 should never be checked for as choice 1 is ALWAYS yes
			
			if result == 2 then
				
				SOUND:PlayBattleSE("EVT_Emote_Sweating")
				GROUND:CharSetEmote(partner, "sweating", 1)
				
				UI:SetSpeakerEmotion("Worried")
				UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_45B']))
				
				GROUND:CharSetDrawEffect(partner, DrawEffect.Shaking)
				
				UI:SetSpeakerEmotion("Teary-Eyed")
				UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_46B']))
				
				GROUND:CharEndDrawEffect(partner, DrawEffect.Shaking)
				
				CharacterActions.HopTwice(partner, Direction.Left)
				
				--new choice menu
				choices = {STRINGS:Format(MapStrings['CH1_S1_Option_4']),
				STRINGS:Format(MapStrings['CH1_S1_Option_6'])}
			
				UI:BeginChoiceMenu(STRINGS:Format(MapStrings['CH1_S1_Partner_47B_'..tostring(pTalkKind)]), choices, 1, 2)
				UI:WaitForChoice()
				result = UI:ChoiceResult() --1 should never be checked for as choice 1 is ALWAYS yes
			
				if result == 2 then
					
					UI:SetSpeakerEmotion("Worried")
					UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S1_Partner_48B']))
					
					--new choice menu
					choices = {STRINGS:Format(MapStrings['CH1_S1_Option_4']),
					STRINGS:Format(MapStrings['CH1_S1_Option_7'])}
			
					UI:BeginChoiceMenu(STRINGS:Format(MapStrings['CH1_S1_Partner_49B']), choices, 1, 2)
					UI:WaitForChoice()
					result = UI:ChoiceResult() --1 should never be checked for as choice 1 is ALWAYS yes
			
					if result == 2 then
						
						SOUND:PlayBattleSE("EVT_Emote_Complain_2")
						GROUND:CharSetEmote(partner, "angry", -1)
						CharacterActions.HopTwice(partner, Direction.Left)
						
						--new choice menu
						choices = {STRINGS:Format(MapStrings['CH1_S1_Option_4']),
						STRINGS:Format(MapStrings['CH1_S1_Option_8'])}
			
						UI:SetSpeakerEmotion("Angry")
						UI:BeginChoiceMenu(STRINGS:Format(MapStrings['CH1_S1_Partner_50B']), choices, 1, 2)
						UI:WaitForChoice()
						
						result = 1 --getting result doesn't matter here as both options force you into yes
						GROUND:CharSetEmote(partner, "none", 1)
						
					end
					
				end
				
			end
		
		end
	end
	
	local coro1 = TASK:BranchCoroutine(function() GAME:FadeOut(false, 60) end) 
	local coro2 = TASK:BranchCoroutine(function() SOUND:FadeOutSE("Ambient/AMB_Ocean", 60) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	--enter dungeon
	GAME:WaitFrames(60)
	GAME:CutsceneMode(false)
	GAME:EnterZone('beach_cave', 0, 0, 0)
	
	--debug end
	--GAME:FadeIn(1)
	--GAME:CutsceneMode(false)
	--GROUND:Unhide("PLAYER")
	
end

function dusk_beach.CH1_ExplorerTeamInvite()
	
	local player = CH('PLAYER')
	local partner = CH('PARTNER')
	
	partner.CollisionDisabled = true
	
	local hTalkKind = SV.Personality.HeroTalkKind
	local pTalkKind = SV.Personality.PartnerTalkKind
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Happy")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_1_'..tostring(pTalkKind)]))
	
	UI:SetSpeaker('', false, player.CurrentForm.Species, player.CurrentForm.Form, player.CurrentForm.Skin, player.CurrentForm.Gender)
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_1']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_2']))
	UI:SetSpeakerEmotion("Happy")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_3']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_4']))
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_2']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_3']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_4']))
	
	SOUND:PlayBGM("004 - On the Beach at Dusk.ogg", true)
	
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_5']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_6']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_7']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_8']))
	UI:SetSpeakerEmotion("Inspired")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_9']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_10']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_11_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_12_'..tostring(pTalkKind)]))
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_13_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_14_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_15_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_16_'..tostring(pTalkKind)]))
	
	UI:SetSpeaker('', false, player.CurrentForm.Species, player.CurrentForm.Form, player.CurrentForm.Skin, player.CurrentForm.Gender)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_5']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_6']))
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_17_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_18']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_19']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_20']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_21']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_22']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_23']))
	UI:SetSpeakerEmotion("Sad")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_24_'..tostring(pTalkKind)]))
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_25'], player:GetDisplayName()))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_26']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_27_'..tostring(pTalkKind)]))
	
	UI:SetSpeaker('', false, player.CurrentForm.Species, player.CurrentForm.Form, player.CurrentForm.Skin, player.CurrentForm.Gender)
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_7']))
	
	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Sad")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_28']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_29_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_30_'..tostring(pTalkKind)], player:GetDisplayName()))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_31_'..tostring(pTalkKind)]))
	
	UI:SetSpeaker('', false, player.CurrentForm.Species, player.CurrentForm.Form, player.CurrentForm.Skin, player.CurrentForm.Gender)
	UI:SetSpeakerEmotion("Surprised")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_8_'..tostring(hTalkKind)]))
	UI:SetSpeakerEmotion("Worried")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_9']))
	
	--begin dialogue choices
	local continue = false
	local choices = {STRINGS:Format(MapStrings['CH1_S3_Option_1']),
           STRINGS:Format(MapStrings['CH1_S3_Option_2']),
           STRINGS:Format(MapStrings['CH1_S3_Option_3'])}
	
	UI:BeginChoiceMenu(STRINGS:Format(MapStrings['CH1_S3_Hero_10']), choices, 1, 3)
	UI:WaitForChoice()
	result = UI:ChoiceResult()
	
	while not continue do
		--A
		if result == 1 then --yes
			continue = true
			
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_11A']))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_12A']))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_13A'], partner:GetDisplayName()))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_14A']))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Hero_15A']))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_32A_'..tostring(pTalkKind)]))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_33A_'..tostring(pTalkKind)]))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_34A_'..tostring(pTalkKind)]))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_35A_'..tostring(pTalkKind)]))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_36A_'..tostring(pTalkKind)], _DATA:GetMonster("wigglytuff"):GetColoredName()))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_37A_'..tostring(pTalkKind)]))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_38A_'..tostring(pTalkKind)]))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_39A_'..tostring(pTalkKind)], player:GetDisplayName()))
			
		--B
		elseif result == 2 then --no
		
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_32B_'..tostring(pTalkKind)]))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_33B'], player:GetDisplayName()))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_34B_'..tostring(pTalkKind)], CH('Koffing'):GetDisplayName()))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_35B'], player:GetDisplayName()))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_36B_'..tostring(pTalkKind)], player:GetDisplayName()))
			
			--back to choices
			UI:BeginChoiceMenu(STRINGS:Format(MapStrings['CH1_S3_Partner_37B_'..tostring(pTalkKind)]), choices, 1, 3)
			UI:WaitForChoice()
			result = UI:ChoiceResult()
			
		else --other
		
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_38B']))
		
			--new choice menu
			choices = {STRINGS:Format(MapStrings['CH1_S3_Option_4'])}
			
			UI:SetSpeakerEmotion("Worried")
			UI:BeginChoiceMenu(STRINGS:Format(MapStrings['CH1_S3_Partner_39B']), choices, 1, 1)
			UI:WaitForChoice()
			--there's only one option here so we don't need to check the result
			
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_40B']))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_41B_'..tostring(pTalkKind)]))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_42B']))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_43B'], player:GetDisplayName()))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_44B'], CH('Koffing'):GetDisplayName()))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_45B']))
			UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S3_Partner_46B'], player:GetDisplayName()))
			
			--new choice menu
			choices = {STRINGS:Format(MapStrings['CH1_S3_Option_1']),
            STRINGS:Format(MapStrings['CH1_S3_Option_2'])} --eliminates option 3 since we already went through that dialogue
			
			UI:BeginChoiceMenu(STRINGS:Format(MapStrings['CH1_S3_Partner_47B']), choices, 1, 2)
			UI:WaitForChoice()
			result = UI:ChoiceResult()
		
		end
	end
	
	--narration
	UI:SetAutoFinish(true)
	UI:WaitShowVoiceOver(STRINGS:Format(MapStrings['CH1_S3_Narration_1']), -1)
	UI:WaitShowVoiceOver(STRINGS:Format(MapStrings['CH1_S3_Narration_2'], player:GetDisplayName(), partner:GetDisplayName()), -1)
	UI:WaitShowVoiceOver(STRINGS:Format(MapStrings['CH1_S3_Narration_3']), -1)
	UI:WaitShowVoiceOver(STRINGS:Format(MapStrings['CH1_S3_Narration_4']), -1)
	UI:WaitShowVoiceOver(STRINGS:Format(MapStrings['CH1_S3_Narration_5']), -1)
	UI:WaitShowVoiceOver(STRINGS:Format(MapStrings['CH1_S3_Narration_6']), -1)
	UI:SetAutoFinish(false)
	
	--debug end
	GAME:CutsceneMode(false)
	GAME:EnterGroundMap("title_catch", "Entrance")
end

function dusk_beach.CH1_FailedBeachCave()

	local player = CH('PLAYER')
	local partner = CH('PARTNER')
	
	partner.CollisionDisabled = true
	
	local hTalkKind = SV.Personality.HeroTalkKind
	local pTalkKind = SV.Personality.PartnerTalkKind

	UI:SetSpeaker(partner)
	UI:SetSpeakerEmotion("Pain")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S2_Partner_1']))
	
	local marker = MRKR("C1S1_PlayerSpawn")
	
	GROUND:TeleportTo(player, marker.Position.X + 20, marker.Position.Y + 32, Direction.Down)
	GROUND:TeleportTo(partner, marker.Position.X - 40, marker.Position.Y + 32, Direction.Down)
	GAME:MoveCamera(partner.Position.X + 30, partner.Position.Y, 1, false)
	GAME:WaitFrames(60)
	
	GROUND:CharSetAnim(player, "Laying", true)
	GROUND:CharSetAnim(partner, "Laying", true)
	
	local coro1 = TASK:BranchCoroutine(function() SOUND:FadeInSE("Ambient/AMB_Ocean", 60) end)
	local coro2 = TASK:BranchCoroutine(function() GAME:FadeIn(60) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	GAME:WaitFrames(15)
	
	local coro1 = TASK:BranchCoroutine(function() GROUND:CharSetDrawEffect(partner, DrawEffect.Shaking) --partner
												GAME:WaitFrames(30)
												GROUND:CharEndDrawEffect(partner, DrawEffect.Shaking)
												GROUND:CharWaitAnim(partner, "Wake")
												GAME:WaitFrames(30)
												GROUND:CharAnimateTurnTo(partner, Direction.Down, 4) 
												CharacterActions.LookAround(partner) end) 
	local coro2 = TASK:BranchCoroutine(function() GAME:WaitFrames(15) --player
												GROUND:CharSetDrawEffect(player, DrawEffect.Shaking) 
												GAME:WaitFrames(30)
												GROUND:CharEndDrawEffect(player, DrawEffect.Shaking)
												GROUND:CharWaitAnim(player, "Wake")
												GAME:WaitFrames(30)
												GROUND:CharAnimateTurnTo(player, Direction.Down, 4) 
												CharacterActions.LookAround(player) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	GAME:WaitFrames(30)
	
	SOUND:PlayBattleSE("EVT_Emote_Sweating")
	GROUND:CharSetEmote(partner, "sweating", 1)
	
	GROUND:CharAnimateTurnTo(partner, Direction.Right, 4)
	GROUND:CharAnimateTurnTo(player, Direction.Left, 4)
	
	GAME:WaitFrames(30)
	
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S2_Partner_2_'..tostring(pTalkKind)]))
	
	UI:SetSpeakerEmotion("Normal")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S2_Partner_3']))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S2_Partner_4']))
	
	SOUND:PlayBattleSE("EVT_Emote_Exclaim")
	GROUND:CharSetEmote(partner, "exclaim", 1)
	GAME:WaitFrames(30)
	
	UI:SetSpeakerEmotion("Surprised")
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S2_Partner_5_'..tostring(pTalkKind)]))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S2_Partner_6_'..tostring(pTalkKind)], CH('Koffing'):GetDisplayName()))
	UI:WaitShowDialogue(STRINGS:Format(MapStrings['CH1_S2_Partner_7_'..tostring(pTalkKind)], player:GetDisplayName()))
	
	local coro1 = TASK:BranchCoroutine(function() posx = partner.Position.X - 16 --partner
												posy = partner.Position.Y + 16
												GROUND:MoveToPosition(partner, posx, posy, false, 1) 
												GROUND:MoveToPosition(partner, partner.Position.X - 200, partner.Position.Y, false, 1)
												GROUND:Hide("PARTNER") end) 
	local coro2 = TASK:BranchCoroutine(function() GAME:WaitFrames(10)
												posx = player.Position.X - 16 --player
												posy = player.Position.Y + 16
												GROUND:MoveToPosition(player, posx, posy, false, 1) 
												GROUND:MoveToPosition(player, player.Position.X - 200, player.Position.Y, false, 1)
												GROUND:Hide("PLAYER") end)
	TASK:JoinCoroutines({coro1, coro2})
	
	local coro1 = TASK:BranchCoroutine(function() GAME:FadeOut(false, 60) end) 
	local coro2 = TASK:BranchCoroutine(function() SOUND:FadeOutSE("Ambient/AMB_Ocean", 60) end)
	TASK:JoinCoroutines({coro1, coro2})
	
	--enter dungeon
	GAME:WaitFrames(60)
	GAME:CutsceneMode(false)
	GAME:EnterDungeon('beach_cave', 0, 0, 0, RogueEssence.Data.GameProgress.DungeonStakes.Risk, true, true)
end

return dusk_beach

